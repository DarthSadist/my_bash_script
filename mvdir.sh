#!/bin/bash
# Указываем интерпретатор, с помощью которого будет выполняться скрипт.

# Определяем ANSI-коды для цветов текста, чтобы улучшить читаемость вывода в терминале
RED='\033[0;31m'  # Код для красного текста (используется для сообщений об ошибках)
GREEN='\033[0;32m'  # Код для зеленого текста (используется для сообщений об успехе)
NC='\033[0m'      # Код сброса цвета (возвращает цвет текста к нормальному)

# Директория для логов
LOG_DIR="/var/log/move_directory"  # Директория, в которую будут сохраняться логи
LOG_FILE="$LOG_DIR/move_directory.log"  # Имя лог-файла

# Проверяем, существует ли директория для логов, и создаем ее, если она не существует
if [ ! -d "$LOG_DIR" ]; then
    sudo mkdir -p "$LOG_DIR"  # Создаем директорию для логов с правами суперпользователя
    sudo chown $(whoami):$(whoami) "$LOG_DIR"  # Меняем владельца на текущего пользователя
fi

# Проверяем, существует ли лог-файл, и создаем его, если он не существует
if [ ! -f "$LOG_FILE" ]; then
    sudo touch "$LOG_FILE"  # Создаем лог-файл, если он не существует
    sudo chown $(whoami):$(whoami) "$LOG_FILE"  # Меняем владельца на текущего пользователя
fi

# Функция для вывода сообщений с форматированием
function log_message {
    # Выводим переданное сообщение на экран и записываем его в лог-файл
    echo -e "$1" | sudo tee -a "$LOG_FILE"
}

# Функция для обработки завершения скрипта
function cleanup {
    # Выводим сообщение о завершении работы скрипта
    log_message "${RED}Скрипт завершен.${NC}"
    exit 1  # Выходим с кодом 1 (ошибка)
}

# Устанавливаем обработку сигналов (SIGINT и SIGTERM) для корректного завершения работы скрипта
trap cleanup SIGINT SIGTERM

# Проверяем, что количество аргументов, переданных скрипту, равно 2
if [ "$#" -ne 2 ]; then
    # Если аргументов не 2, выводим сообщение об ошибке и завершаем выполнение скрипта
    log_message "${RED}2 аргумента требуются: директория, которую нужно переместить, и целевая директория${NC}"
    exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
fi

# Присваиваем аргументы переменным для удобства
SRC_DIR="$1"  # Исходная директория, которую нужно переместить
DEST_DIR="$2"  # Целевая директория, куда нужно переместить исходную директорию

# Проверяем, существует ли исходная директория
if [ ! -d "$SRC_DIR" ]; then
    # Если директория не существует или это не директория, выводим сообщение об ошибке
    log_message "${RED}Ошибка: $SRC_DIR не существует или это не директория${NC}"
    exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
fi

# Проверяем, существует ли целевая директория
if [ ! -d "$DEST_DIR" ]; then
    # Если директория не существует или это не директория, выводим сообщение об ошибке
    log_message "${RED}Ошибка: $DEST_DIR не существует или это не директория${NC}"
    exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
fi

# Проверяем, что у нас есть права на чтение исходной директории
if [ ! -r "$SRC_DIR" ]; then
    # Если нет прав на чтение, выводим сообщение об ошибке и завершаем выполнение
    log_message "${RED}Ошибка: нет прав на чтение $SRC_DIR${NC}"
    exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
fi
# Проверяем, что у нас есть права на запись в целевую директорию
if [ ! -w "$DEST_DIR" ]; then
    # Если нет прав на запись, выводим сообщение об ошибке и завершаем выполнение
    log_message "${RED}Ошибка: нет прав на запись в $DEST_DIR${NC}"
    exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
fi

# Проверяем, существует ли директория с таким же именем в целевой директории
if [ -d "$DEST_DIR/$(basename "$SRC_DIR")" ]; then
    # Если директория с тем же именем уже существует, выводим предупреждение
    log_message "${RED}Предупреждение: директория $(basename "$SRC_DIR") уже существует в $DEST_DIR.${NC}"
    # Предлагаем пользователю выбрать, что делать: перезаписать или отменить операцию
    read -p "Хотите перезаписать её? (y/n): " choice
    if [[ "$choice" != "y" ]]; then
        # Если пользователь не хочет перезаписывать, выводим сообщение и завершаем операцию
        log_message "${RED}Операция отменена пользователем.${NC}"
        exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
    fi
fi

# Пытаемся скопировать директорию из первого аргумента во второй
if cp -r "$SRC_DIR" "$DEST_DIR"; then
    # Если копирование прошло успешно, удаляем исходную директорию
    rm -rf "$SRC_DIR" && log_message "${GREEN}Директория $SRC_DIR успешно перемещена в $DEST_DIR${NC}"
    exit 0  # Завершаем выполнение скрипта с кодом 0 (успешно)
else
    # Если произошла ошибка при копировании, выводим сообщение об ошибке
    log_message "${RED}Ошибка! Не удалось переместить директорию${NC}"
    exit 1  # Завершаем выполнение скрипта с кодом 1 (ошибка)
fi

